#line 2 "vblexer.cpp"

#line 4 "vblexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[667] =
    {   0,
        0,    0,    0,    0,   24,   22,    3,    2,   22,    9,
        6,   22,   13,    5,    7,    7,    7,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   22,
       21,   21,   21,   21,   21,   21,   21,   10,   12,    3,
        1,    0,    8,    5,    7,   21,   21,   21,   19,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   14,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   14,   21,
       18,   19,    6,   21,   21,   21,   21,   21,   21,   19,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   18,
       21,    6,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   18,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,    0,    4,   10,
       11,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   18,
       21,   21,   21,   18,   21,   21,   21,   21,   21,   21,
       14,   21,   21,   18,   21,   21,   21,   21,   21,   19,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   19,   21,   21,   21,    6,    0,   21,   21,   21,

       21,   21,   21,   21,   18,   21,   21,   21,   18,   21,
       21,   21,   21,   21,   21,   21,   21,   18,   21,   21,
       21,   17,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   18,   21,   21,
       21,   21,   18,   18,   21,   21,   21,   21,   21,   21,
       18,   21,   21,   21,   18,   14,   21,    0,   18,   21,
       21,   21,   21,   21,   21,   21,   21,   18,   21,   21,
       18,   18,   18,   19,   18,   18,   21,   21,   21,   18,
       18,   21,   19,    0,   18,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   18,

       21,   18,   21,   21,   21,   21,   18,   18,   19,   18,
       19,   18,   21,   21,   21,   21,   21,   21,   21,   18,
       21,   21,   18,   21,   21,   21,   21,   20,   21,   19,
       19,   18,   21,   20,   18,   18,   21,   21,   21,   21,
       21,   21,   19,    0,    0,    0,    0,   18,   18,    0,
       19,   21,   21,   21,   18,   21,   18,   18,   21,   21,
       21,    0,   21,   21,   21,   19,   21,   21,   21,   21,
       21,   18,   18,   21,   21,   21,   18,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   14,   21,   21,   21,   21,   21,   21,   19,   21,

       21,   21,   21,   21,   21,   14,    0,   18,    0,    0,
        0,    0,    0,    0,   21,   19,   21,   21,   21,   21,
       21,    0,   19,   21,   21,    0,   21,   21,   18,   21,
       21,   21,   18,   18,   21,   21,   14,   21,   21,   18,
       18,   18,   21,   21,   21,   21,   21,   21,    0,   21,
        0,   21,   21,   21,   18,   21,   21,   18,   18,   21,
        0,    0,    0,   16,    0,    0,    0,   21,   21,   21,
       21,   21,   19,    0,    0,   21,   21,   21,   18,   18,
       21,   21,   21,   19,   21,   21,   21,   18,   21,   21,
       21,   20,   21,   20,   21,   21,   21,   21,   21,   21,

       21,    0,    0,    0,    0,    0,   15,   18,   17,   21,
       21,   20,   18,    0,    0,    0,    0,   19,   21,   21,
       17,   21,   21,   21,   21,   18,   21,   21,   21,   21,
       21,   21,   20,   21,   21,   21,    0,    0,    0,    0,
        0,   21,   21,    0,    0,    0,    0,   21,   21,    0,
       21,   18,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,    0,    0,   18,    0,    0,   18,   21,
        0,    0,    0,    0,   19,   21,    0,    0,    0,   18,
       21,   21,   21,   20,   21,   21,   19,   18,   21,   21,
       21,    0,    0,    0,    0,   21,   18,    0,    0,    0,

       20,    0,    0,    0,   18,   18,   21,   21,   21,   21,
       21,   21,   16,   16,    0,    0,   21,    0,    0,    0,
       18,   18,   18,   20,   21,   21,   21,   21,   18,   15,
       15,   21,    0,    0,    0,   21,   21,   21,   21,   21,
       18,    0,   18,   21,   21,   21,   21,   21,   18,   21,
       21,   21,   21,   21,   21,   20,   21,   21,   21,   21,
       21,   20,   20,   20,   20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    1,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,   50,    1,   51,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   34,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[671] =
    {   0,
        0,    0, 1876, 1875, 1880, 1883,   76, 1883, 1876, 1883,
     1883, 1875, 1883, 1858, 1853,   58, 1852,   71,   76,   87,
      110,  169,  121,   91, 1866,  161,   83,  188,  212,  228,
      210,  251,  274,  262,  289,   90,   77,  257,   79,   87,
      299, 1805,  337,  339,  354,  355,  148,    0, 1866,   81,
     1883, 1868, 1883, 1851, 1883, 1883, 1861,   92, 1860,  158,
      102,  114,  328,  113,  345,  340,  153,  398,  384,  181,
      405,  171, 1859,  156,  231,  285,  411,  187,  194,  167,
       99,  288,  352,  302,  396,  409,  385,  416, 1858,  324,
      412, 1857, 1856,  425,  428,  432,  423,  446,  457, 1855,

      445,  430,  469,  117,  461,  434,  474,  476,  477,   88,
      484, 1854,  482,  483,  496,  488,  520,  526,  508,  486,
      499,  541,  563,  539,  532,  530, 1853,  502,  565,  567,
      260,  542,  522,  558,  572,  591,  177,   99, 1883,    0,
     1883,  235,  568,  365,  578,  593,  570,  602,  600,  599,
      609,  606,  613,  614,  619,  640,  605,  628,  634, 1852,
      625,  641,  636,   89,  650,  632,  638,  652,  664,  665,
     1851,  672,  669, 1850,  656,  263,  642,  673,  674, 1849,
     1848,  682,  680,  678,  701,  684,  256,  710,  704,  707,
      696, 1847,  708,  712,  713,  722,  702,  718,  724,  727,

      725,  752,  734,  730, 1846,  750,  753,  754, 1845,  755,
      756,  761,  762,  757,  711,  769,  780,  781,  788,  783,
      795, 1844,  799,  803,  810,  811,  805,  834,  796,  802,
      813,  808,  821,  835,  848,  837,  816, 1843,  839,  844,
      872,  833, 1842, 1841,  846,  849,  875,  876,  847,  886,
     1840,  884,  838,  880, 1839,  887,  899,  892, 1838,  892,
      900,  258,  923,  889,  903,  911,  916, 1837,  928,  918,
     1836, 1835, 1834, 1833, 1832, 1831,  919,  931,  930, 1829,
     1820,  950, 1818,  905, 1817,  927,  957,  959,  947,  956,
      968,  965,  970,  969,  976,  961,  978,  987,  988, 1816,

      994, 1815,  995,  971, 1002,  997, 1814, 1813, 1812, 1811,
     1810, 1809, 1035, 1008,  999, 1015, 1023, 1011, 1004, 1808,
     1009, 1031, 1039, 1046, 1016, 1045,  436, 1807, 1036, 1806,
     1805, 1802, 1047, 1801, 1800, 1799, 1061, 1059, 1064, 1062,
     1071, 1074, 1798, 1037, 1053, 1044, 1064, 1796, 1794, 1076,
     1790, 1078, 1099, 1081, 1788, 1087, 1786, 1784, 1115, 1093,
     1107, 1069, 1111, 1122, 1089,  438, 1118, 1133, 1127, 1131,
     1140, 1782, 1780, 1142, 1144, 1145, 1779, 1148, 1155, 1149,
     1156, 1150, 1159, 1162, 1161, 1158, 1163, 1172, 1170, 1187,
     1183, 1778,  513, 1154, 1189, 1192, 1197, 1190, 1774, 1200,

     1209, 1211, 1216, 1223, 1220, 1773,   50, 1883, 1193, 1200,
     1200, 1189, 1196, 1195, 1232, 1766, 1227, 1235, 1238, 1240,
     1248, 1211, 1263, 1243, 1262, 1765, 1267, 1270, 1762, 1250,
     1273, 1279, 1760, 1748, 1277, 1278, 1507, 1281, 1286, 1441,
     1395, 1381, 1289, 1292, 1283, 1290, 1294, 1307, 1376, 1309,
     1294, 1303, 1310,  301, 1234, 1312, 1318,  993,  979, 1317,
     1301, 1295, 1310, 1883, 1305, 1305, 1325, 1344, 1346, 1352,
     1353, 1356,  921, 1322, 1367, 1365, 1357, 1361, 1883,  840,
     1367, 1370, 1369,  794, 1389, 1392, 1374,  740, 1394, 1396,
     1380,  643, 1400,  626, 1402, 1411, 1401, 1322, 1398, 1434,

     1404, 1382, 1412, 1418, 1421, 1410, 1883,  548,  529, 1431,
     1443,  525, 1883, 1427, 1415, 1408, 1415,  518, 1454, 1462,
     1477, 1463, 1464, 1470, 1478,  503, 1479, 1483, 1482, 1486,
     1484, 1487,  494, 1491, 1490, 1492, 1464, 1462, 1462, 1463,
     1479, 1501, 1530, 1478, 1473, 1477, 1489, 1516, 1515, 1518,
     1518,  437, 1538, 1544, 1554, 1545, 1557, 1551, 1558, 1561,
     1560, 1567, 1564, 1528, 1527, 1883, 1541, 1535,  422, 1588,
     1554, 1546, 1563, 1539,  369, 1595, 1576, 1577, 1581,  353,
     1607, 1608, 1609,  348, 1612, 1615,  346,  338, 1621, 1619,
     1622, 1597, 1593, 1604, 1603, 1624, 1883, 1624, 1617, 1626,

      327, 1610, 1611, 1612,  254,  253, 1634, 1636, 1648, 1663,
     1658, 1653, 1883, 1883, 1642, 1610, 1680, 1652, 1667, 1652,
     1883, 1883, 1883,  196, 1695, 1696, 1694, 1688,  189, 1883,
     1883, 1690, 1670, 1668, 1676, 1689, 1702, 1707, 1698, 1700,
     1883, 1668, 1883, 1708, 1701, 1706, 1728, 1727, 1883, 1732,
     1739, 1730, 1734, 1741, 1757,  184, 1737, 1736, 1770, 1772,
     1742,  176,  172,  160,  109, 1883, 1829, 1832,  105, 1835
    } ;

static yyconst flex_int16_t yy_def[671] =
    {   0,
      666,    1,  667,  667,  666,  666,  666,  666,  666,  666,
      666,  668,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  666,
      669,   22,  669,  669,  669,  669,  669,  670,  666,  666,
      666,  668,  666,  666,  666,  666,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  666,  666,  670,
      666,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  666,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  666,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  666,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  666,  666,  666,  666,  669,  669,  666,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  666,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  666,  666,  666,  666,
      666,  666,  666,  666,  669,  669,  669,  669,  669,  669,
      669,  666,  669,  669,  669,  666,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  666,  669,
      666,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      666,  666,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  669,  666,  666,  669,  669,  669,  666,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  666,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  666,  666,  666,  666,
      666,  669,  669,  666,  666,  666,  666,  669,  669,  666,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  666,  666,  666,  666,  666,  669,  669,
      666,  666,  666,  666,  669,  669,  666,  666,  666,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  666,  666,  666,  666,  669,  666,  666,  666,  666,

      669,  666,  666,  666,  669,  669,  669,  669,  669,  669,
      669,  669,  666,  666,  666,  666,  669,  666,  666,  666,
      666,  666,  666,  669,  669,  669,  669,  669,  669,  666,
      666,  669,  666,  666,  666,  669,  669,  669,  669,  669,
      666,  666,  666,  669,  669,  669,  669,  669,  666,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,    0,  666,  666,  666,  666
    } ;

static yyconst flex_int16_t yy_nxt[1961] =
    {   0,
        6,    7,    8,    9,    7,   10,    6,    6,   11,   12,
       13,   13,   11,   11,   13,   11,   13,   11,   14,   13,
       13,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   25,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   25,   25,   11,
       11,   40,   41,   19,   20,   21,   42,   23,   24,   25,
       43,   27,   44,   45,   46,   47,   32,   25,   33,   34,
       35,   36,   37,   38,   25,   25,   25,   50,   56,   55,
       50,   55,   50,   56,   56,   50,   56,  461,  138,  139,
       56,  138,  197,  258,   56,   56,   56,   56,   56,   56,

      138,  139,  131,  138,   63,  132,   56,   57,   64,   56,
       58,   66,   59,   60,  461,   94,   56,   56,   67,   87,
       56,   56,   68,   65,   56,   69,   61,  130,   56,   88,
      131,  142,   63,  132,   70,   62,   64,   58,   71,   66,
       59,   60,   72,   94,  137,   82,   67,   87,   73,   68,
      147,   65,   69,   83,  130,   56,   88,  144,  142,   84,
       56,   85,   70,   56,   86,   56,   71,   56,   56,  112,
       72,  112,  112,   82,   56,   73,   56,  147,   56,   56,
      152,   83,  161,   56,   56,  110,   84,  111,   56,   85,
       89,   56,   86,   74,   56,   56,   56,   90,   91,  168,

      143,   56,   92,   56,   75,   76,   77,  160,  152,   78,
      161,  166,  110,   79,  111,   80,   95,   56,   89,   56,
       96,   74,  167,  156,   90,   91,   97,  168,  143,   98,
       93,   75,   76,   77,  160,   56,   81,   78,   56,  166,
      100,   79,   56,   80,   95,  112,  101,  110,   99,  111,
      167,  156,  105,   97,  102,  103,  106,   98,   56,  235,
       56,   56,  350,   56,   56,   56,  107,   56,  100,   56,
       56,  108,  162,  101,  110,  113,  111,  104,  112,  114,
      105,   56,  102,  103,  106,  133,  121,  235,  134,  135,
      122,  115,   56,  109,  116,   56,   56,  136,  117,  108,

      162,  268,  118,  113,  123,  124,   56,  114,   56,   56,
      119,  228,  112,  133,  121,  120,  134,  135,  122,  115,
      125,  126,  116,  169,  163,  136,  117,  127,  268,  128,
      118,   56,  123,  124,   56,   56,  129,  119,   58,  498,
       59,   60,  171,  120,   56,   56,   56,   56,  125,  126,
      169,  163,   56,   56,  127,   56,  145,  128,  146,   56,
       56,   56,   56,  177,  129,   58,   89,   95,   59,   60,
      171,   96,   56,   90,   91,  150,   56,   97,   92,  105,
       98,  151,  100,  106,  145,  148,  146,  170,  101,  149,
      177,   56,   56,  107,   89,   95,  102,  103,  108,   96,

       90,   91,  150,   56,   97,   56,   92,  105,   98,  151,
      100,  106,   56,  148,  170,  101,   56,  149,   56,   56,
      107,  155,  153,   56,  102,  103,  108,  174,  172,   56,
       56,  157,   56,  237,  158,   56,  154,   56,  164,   56,
      159,   56,  426,   56,   56,   56,  173,  183,  155,  184,
      153,  178,   56,   56,  165,  174,  172,  175,  176,  157,
      179,  185,  158,  154,   56,  180,  164,  159,   56,  182,
      181,  189,  188,  173,  186,  183,   56,  184,  178,  192,
      193,   56,  165,   56,   56,  175,  176,  179,  185,   56,
       56,   56,  180,   56,  182,   56,  182,  191,  181,  189,

      188,   56,  186,   56,  190,  398,   56,  192,  193,   56,
       56,  195,  198,  204,  213,   56,  194,  449,  187,  194,
       56,  182,  200,  201,  191,   56,  199,   56,  202,   56,
      205,  190,   56,   56,  203,  212,   56,   56,  195,   56,
      198,  204,  213,  214,  194,  225,   56,  196,   56,   56,
      200,  201,  206,  208,  199,   56,  202,  207,  205,  230,
      223,  203,  209,  212,  222,   56,  224,  210,  211,  215,
       56,  214,   56,  225,   56,   56,  216,   56,  217,   56,
      206,  208,  229,  218,  207,   56,  230,  219,  223,  209,
      231,  220,  222,  224,  240,  210,  211,  215,   56,  232,

       56,  221,  227,  216,  226,  217,   56,   56,  236,   56,
      229,  218,   56,   56,  233,  219,   56,  238,  231,  220,
       56,   56,  240,  234,  242,  239,   56,  232,  221,  227,
      241,  226,   56,   56,  243,   56,  236,  244,  245,   56,
      252,   56,  233,   56,  238,   56,  246,   56,   56,   56,
       56,  234,  242,  239,  247,  248,  255,   56,  241,   56,
      249,  243,  254,   56,  250,  244,  245,  252,  251,  256,
      253,   56,   56,  260,  246,  261,   56,  269,  257,   56,
       56,   56,  247,  248,  255,   56,  259,   56,  249,   56,
      254,   56,  250,  264,  262,  266,  251,  256,  253,  267,

      265,  260,  261,   56,  269,  263,  257,  273,   56,  271,
      272,   56,  274,  259,   56,   56,  270,   56,   56,   56,
       56,  264,  262,  266,  280,   56,  276,  267,  265,   56,
      284,   56,   56,  263,   56,  273,  271,   56,  272,  274,
      275,   56,  277,  282,  270,  302,  278,   56,  283,  279,
      281,  287,  280,  282,  276,  285,  286,   56,  284,   56,
       56,   56,   56,   56,   56,  292,  288,  275,   56,   56,
      277,  282,  302,  291,  278,  283,   56,  279,  281,  287,
      294,  282,  285,  296,  286,  301,  295,   56,   56,  289,
       56,  293,  292,  299,  288,   56,  290,  303,  297,  298,

      291,   56,   56,   56,  300,  305,   56,  304,  294,   56,
       56,  296,   56,  301,  295,   56,  289,   56,   56,  293,
       56,  299,  307,   56,  290,  303,  297,  298,   56,  320,
      306,  310,  300,  305,  308,  304,  309,  319,  311,  312,
       56,   56,   56,  313,   56,   56,   56,   56,  321,  307,
      322,   56,  323,   56,   56,   56,   56,  320,  306,  310,
      314,  308,  315,  309,  316,  319,  311,  312,  331,  326,
      313,  317,  327,  318,  325,  321,  328,  324,  322,   56,
      323,  333,   56,   56,  329,  340,  332,   56,  314,  336,
      315,   56,  316,   56,   56,  331,   56,  326,  317,   56,

      318,  330,  325,  328,  335,  324,   56,   56,  339,  333,
       56,  337,  329,  340,  332,  352,  334,  336,   56,  342,
      348,  344,  341,   56,  345,   56,   56,  338,   56,  330,
       56,  346,  335,  347,   56,   56,  339,   56,   56,  337,
      353,  355,  349,  352,  334,  362,  343,  342,  348,  344,
      341,  351,  345,  354,   56,  338,  356,   56,  346,  358,
      357,  347,  360,   56,   56,  363,   56,  353,   56,  355,
      349,  359,   56,  362,  343,   56,   56,   56,   56,  351,
      367,  354,  361,   56,  356,   56,   56,  358,  357,  366,
      360,  365,  363,  364,   56,   56,  368,  369,  370,  359,

       56,   56,   56,  373,   56,  381,   56,  371,  367,   56,
      361,   56,  372,  374,  375,   56,   56,  366,   56,  365,
      364,  380,   56,   56,  368,  369,  370,  376,  377,  383,
       56,  373,  381,  378,  371,  379,  391,  392,   56,  372,
      374,  375,   56,   56,  382,  387,   56,  389,  386,  380,
      388,  390,   56,   56,   56,  376,  377,  383,  396,  384,
      378,  385,  393,  379,  391,  392,   56,  394,   56,   56,
      397,   56,  382,  387,  395,  389,  386,  388,   56,  390,
      407,   56,  408,  399,  409,   56,  396,  384,   56,  385,
      393,  400,  410,  401,   56,  394,   56,  402,  397,  405,

       56,  404,  395,  406,  403,  412,   56,  411,  407,  422,
      408,  399,  409,  417,   56,  413,  415,  414,   56,  400,
      410,  401,   56,  418,  402,   56,  416,  405,  404,   56,
      425,  406,  403,  412,   56,  411,  420,  422,   56,  419,
       56,  417,  413,  415,  421,  414,  424,   56,  423,   56,
      418,   56,   56,  429,  416,   56,   56,   56,  425,  430,
      427,   56,   56,   56,  420,   56,   56,  419,   56,   56,
       56,  421,  433,  428,  424,  423,  431,   56,  432,   56,
      435,  429,  434,  436,  438,  440,  443,  430,  427,  441,
       56,  437,  439,  451,   56,  442,   56,   56,  450,   56,

      433,  428,  444,  431,   56,  432,  446,   56,  435,  434,
      445,  436,  438,  440,  443,  447,   56,  441,   56,  437,
      439,  448,  442,   56,  452,  464,  450,   56,  455,  444,
       56,  462,  465,  446,   56,  463,  466,  445,  467,   56,
      453,   56,   56,  447,  458,   56,  456,   56,  448,  474,
       56,  459,  452,  464,  457,   56,  455,   56,  462,  454,
      465,  460,  463,  470,  466,  469,  467,  475,  453,   56,
       56,  468,  458,  456,   56,  471,  474,   56,  473,  459,
       56,  472,  457,  477,   56,   56,   56,  476,   56,  460,
       56,  470,  469,   56,  482,  480,   56,   56,  468,   56,

      479,   56,  471,  485,  478,  483,  473,  484,  491,  472,
       56,  477,  481,  489,   56,  476,   56,   56,  492,   56,
      486,  493,  482,  480,   56,   56,  488,  502,  487,   56,
      490,  485,  478,  483,  503,  484,  491,  495,  504,  499,
      481,  489,  505,  506,  494,  501,  492,  496,  486,  493,
      507,   56,  497,   56,  488,  502,  487,  490,  500,   56,
       56,  503,  513,   56,   56,  495,  504,  499,   56,  505,
      506,  494,   56,  501,   56,  496,   56,   56,  507,  112,
      497,   56,  479,  509,  512,  520,  500,   56,   56,  510,
      513,  508,  514,  515,  511,  516,   56,  519,  522,   56,

      518,   56,   56,   56,  529,   56,  517,   56,   56,   56,
      509,   56,  512,  520,  521,  526,  510,  523,   56,  508,
      514,  515,  511,  516,  537,  519,  522,  518,  530,  533,
      534,  524,  529,  517,  525,  532,  527,  528,   56,  531,
      538,   56,  521,  526,  539,  523,  536,  540,   56,  541,
       56,  544,  537,  545,  546,  547,  530,  533,  534,  524,
      535,   56,  525,  532,  527,  528,  531,  543,  538,   56,
       56,   56,  539,  542,  536,  540,  541,   56,  548,  544,
      545,  550,  546,  547,   56,   56,   56,  549,  535,   56,
       56,   56,  552,   56,   56,  543,  564,   56,   56,   56,

      551,  542,  565,  555,  566,  567,  548,  568,   56,  572,
      554,  556,  558,  553,   56,  549,  573,  557,  562,  571,
      552,  574,   56,   56,  564,   56,  559,  551,  561,  560,
      565,  555,  566,  567,  563,  568,  572,   56,  554,  556,
      558,  553,  569,  573,  557,   56,  562,  571,  577,  574,
      576,   56,   56,  578,  559,  561,  570,  560,   56,  579,
      580,   56,  563,  575,   56,   56,  592,   56,   56,  593,
      569,   56,  584,  594,   56,  595,  577,  576,  581,  583,
      578,  582,  597,  600,  570,  598,  586,  579,  580,  588,
      589,  575,  590,  592,  585,   56,  591,  593,  599,  587,

      584,  594,   56,  595,  602,  603,  581,  583,  582,  604,
      597,  600,  598,  586,   56,   56,   56,  588,  589,   56,
      590,  585,   56,  601,  591,  599,   56,  587,   56,   56,
      596,   56,  602,  603,  613,  605,  608,  604,  606,  609,
      614,   56,  615,   56,  607,  616,  610,  611,  618,  619,
      620,  601,  621,  622,  623,   56,  617,  631,  596,  612,
       56,  613,  624,  605,  608,   56,  606,  609,  614,  615,
       56,  607,  625,  616,  610,  611,  618,  619,  620,  630,
      621,  622,  623,  629,  617,  631,  612,   56,  626,  628,
      624,  627,  633,  634,  635,   56,   56,   56,  641,  625,

      642,   56,   56,   56,  643,   56,  630,   56,   56,   56,
      649,  629,  639,   56,   56,   56,  626,  628,  632,  627,
      633,  634,  635,  636,  637,  638,  641,  640,  642,  645,
      644,  646,  643,  651,   56,   56,  648,   56,  649,   56,
      639,   56,  647,   56,   56,  632,   56,  650,   56,   56,
      652,  636,  637,  638,  640,   56,  655,  645,  644,  646,
      653,  651,  657,  648,   56,  654,  656,   56,  659,   56,
      647,  479,  658,   56,  650,  661,  662,   56,  652,   56,
       56,   56,  665,  660,  655,   56,   56,   56,  653,   56,
      657,   56,  654,   56,  656,   56,  659,   56,  663,  658,

      664,   56,  661,   56,  662,   56,   56,   56,   56,   56,
      665,  660,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  663,   56,  664,   48,
       48,   48,   52,   52,   52,  140,   56,  140,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   54,
       53,  141,   57,   56,   55,   55,   54,   53,   51,  666,
       49,   49,    5,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666
    } ;

static yyconst flex_int16_t yy_chk[1961] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,   18,   16,
        7,   16,   50,   19,   37,   50,   39,  407,   40,   40,
       27,   40,  110,  164,   20,  110,  164,   36,   24,   58,

      138,  138,   37,  138,   19,   37,   81,  669,   19,   61,
       18,   20,   18,   18,  407,   27,  665,   21,   20,   24,
       64,   62,   20,   19,  104,   20,   18,   36,   23,   24,
       37,   58,   19,   37,   21,   18,   19,   18,   21,   20,
       18,   18,   21,   27,   39,   23,   20,   24,   21,   20,
       64,   19,   20,   23,   36,   47,   24,   61,   58,   23,
       67,   23,   21,   74,   23,   60,   21,  664,   26,   62,
       21,   81,  104,   23,   80,   21,   22,   64,   72,  663,
       67,   23,   74,  662,  137,   47,   23,   47,   70,   23,
       26,  656,   23,   22,   78,   28,  629,   26,   26,   80,

       60,   79,   26,  624,   22,   22,   22,   72,   67,   22,
       74,   78,   47,   22,   47,   22,   28,   31,   26,   29,
       28,   22,   79,   70,   26,   26,   28,   80,   60,   28,
       26,   22,   22,   22,   72,   30,   22,   22,   75,   78,
       29,   22,  142,   22,   28,  137,   29,   31,   28,   31,
       79,   70,   30,   28,   29,   29,   30,   28,   32,  142,
      606,  605,  262,  187,   38,  262,   30,  131,   29,   34,
      176,   30,   75,   29,   31,   32,   31,   29,   31,   32,
       30,   33,   29,   29,   30,   38,   34,  142,   38,   38,
       34,   32,   76,   30,   32,   82,   35,   38,   33,   30,

       75,  176,   33,   32,   34,   34,   41,   32,  454,   84,
       33,  131,  187,   38,   34,   33,   38,   38,   34,   32,
       35,   35,   32,   82,   76,   38,   33,   35,  176,   35,
       33,   90,   34,   34,  601,   63,   35,   33,   41,  454,
       41,   41,   84,   33,   43,  588,   44,   66,   35,   35,
       82,   76,   65,  587,   35,  584,   63,   35,   63,   83,
      580,   45,   46,   90,   35,   41,   43,   44,   41,   41,
       84,   44,  144,   43,   43,   66,  575,   44,   43,   46,
       44,   66,   45,   46,   63,   65,   63,   83,   45,   65,
       90,   69,   87,   46,   43,   44,   45,   45,   46,   44,

       43,   43,   66,   85,   44,   68,   43,   46,   44,   66,
       45,   46,   71,   65,   83,   45,   86,   65,   77,   91,
       46,   69,   68,   88,   45,   45,   46,   87,   85,  569,
       97,   71,   94,  144,   71,   95,   68,  102,   77,   96,
       71,  106,  366,  327,  552,  366,   86,   97,   69,   97,
       68,   91,  101,   98,   77,   87,   85,   88,   88,   71,
       94,   97,   71,   68,   99,   95,   77,   71,  105,   96,
       95,  102,  101,   86,   98,   97,  103,   97,   91,  106,
      106,  107,   77,  108,  109,   88,   88,   94,   97,  113,
      114,  111,   95,  120,   99,  116,   96,  105,   95,  102,

      101,  533,   98,  115,  103,  327,  121,  106,  106,  128,
      526,  108,  111,  116,  120,  119,  107,  393,   99,  109,
      393,   99,  113,  114,  105,  518,  111,  117,  115,  133,
      116,  103,  512,  118,  115,  119,  509,  126,  108,  125,
      111,  116,  120,  121,  107,  128,  124,  109,  122,  132,
      113,  114,  117,  118,  111,  508,  115,  117,  116,  133,
      125,  115,  118,  119,  124,  134,  126,  118,  118,  122,
      123,  121,  129,  128,  130,  143,  122,  147,  122,  135,
      117,  118,  132,  122,  117,  145,  133,  123,  125,  118,
      134,  123,  124,  126,  147,  118,  118,  122,  136,  135,

      146,  123,  130,  122,  129,  122,  150,  149,  143,  148,
      132,  122,  157,  152,  135,  123,  151,  145,  134,  123,
      153,  154,  147,  136,  149,  146,  155,  135,  123,  130,
      148,  129,  161,  494,  150,  158,  143,  151,  152,  166,
      157,  159,  135,  163,  145,  167,  152,  156,  162,  177,
      492,  136,  149,  146,  153,  154,  161,  165,  148,  168,
      155,  150,  159,  175,  156,  151,  152,  157,  156,  162,
      158,  169,  170,  166,  152,  167,  173,  177,  163,  172,
      178,  179,  153,  154,  161,  184,  165,  183,  155,  182,
      159,  186,  156,  170,  168,  173,  156,  162,  158,  175,

      172,  166,  167,  191,  177,  169,  163,  183,  185,  179,
      182,  189,  184,  165,  190,  193,  178,  188,  215,  194,
      195,  170,  168,  173,  191,  198,  186,  175,  172,  196,
      197,  199,  201,  169,  200,  183,  179,  204,  182,  184,
      185,  203,  188,  194,  178,  215,  189,  488,  195,  190,
      193,  200,  191,  196,  186,  198,  199,  206,  197,  202,
      207,  208,  210,  211,  214,  204,  201,  185,  212,  213,
      188,  194,  215,  203,  189,  195,  216,  190,  193,  200,
      207,  196,  198,  210,  199,  214,  208,  217,  218,  202,
      220,  206,  204,  212,  201,  219,  202,  216,  210,  211,

      203,  484,  221,  229,  213,  218,  223,  217,  207,  230,
      224,  210,  227,  214,  208,  232,  202,  225,  226,  206,
      231,  212,  220,  237,  202,  216,  210,  211,  233,  230,
      219,  224,  213,  218,  221,  217,  223,  229,  225,  226,
      242,  228,  234,  227,  236,  253,  239,  480,  231,  220,
      232,  240,  233,  245,  249,  235,  246,  230,  219,  224,
      228,  221,  228,  223,  228,  229,  225,  226,  242,  236,
      227,  228,  237,  228,  235,  231,  239,  234,  232,  241,
      233,  246,  247,  248,  240,  253,  245,  254,  228,  249,
      228,  252,  228,  250,  256,  242,  264,  236,  228,  260,

      228,  241,  235,  239,  248,  234,  257,  261,  252,  246,
      265,  250,  240,  253,  245,  264,  247,  249,  266,  256,
      260,  258,  254,  267,  258,  270,  277,  250,  473,  241,
      263,  258,  248,  258,  286,  269,  252,  279,  278,  250,
      265,  267,  261,  264,  247,  284,  257,  256,  260,  258,
      254,  263,  258,  266,  289,  250,  269,  282,  258,  277,
      270,  258,  279,  290,  287,  286,  288,  265,  296,  267,
      261,  278,  292,  284,  257,  291,  294,  293,  304,  263,
      290,  266,  282,  295,  269,  297,  459,  277,  270,  289,
      279,  288,  286,  287,  298,  299,  291,  292,  293,  278,

      458,  301,  303,  296,  306,  304,  315,  294,  290,  305,
      282,  319,  295,  297,  297,  314,  321,  289,  318,  288,
      287,  303,  316,  325,  291,  292,  293,  298,  299,  306,
      317,  296,  304,  301,  294,  301,  319,  321,  322,  295,
      297,  297,  313,  329,  305,  315,  323,  317,  314,  303,
      316,  318,  326,  324,  333,  298,  299,  306,  325,  313,
      301,  313,  322,  301,  319,  321,  338,  323,  337,  340,
      326,  339,  305,  315,  324,  317,  314,  316,  341,  318,
      344,  342,  345,  329,  346,  352,  325,  313,  354,  313,
      322,  333,  347,  337,  356,  323,  365,  338,  326,  341,

      360,  340,  324,  342,  339,  350,  353,  347,  344,  362,
      345,  329,  346,  354,  361,  350,  352,  350,  363,  333,
      347,  337,  359,  356,  338,  367,  353,  341,  340,  364,
      365,  342,  339,  350,  369,  347,  360,  362,  370,  359,
      368,  354,  350,  352,  361,  350,  364,  371,  363,  374,
      356,  375,  376,  369,  353,  378,  380,  382,  365,  370,
      367,  394,  379,  381,  360,  386,  383,  359,  385,  384,
      387,  361,  375,  368,  364,  363,  371,  389,  374,  388,
      378,  369,  376,  379,  381,  383,  386,  370,  367,  384,
      391,  380,  382,  395,  390,  385,  395,  398,  394,  396,

      375,  368,  387,  371,  397,  374,  389,  400,  378,  376,
      388,  379,  381,  383,  386,  390,  401,  384,  402,  380,
      382,  391,  385,  403,  396,  411,  394,  405,  400,  387,
      404,  409,  412,  389,  417,  410,  413,  388,  414,  415,
      397,  455,  418,  390,  403,  419,  401,  420,  391,  422,
      424,  404,  396,  411,  402,  421,  400,  430,  409,  398,
      412,  405,  410,  418,  413,  417,  414,  423,  397,  425,
      423,  415,  403,  401,  427,  419,  422,  428,  421,  404,
      431,  420,  402,  424,  435,  436,  432,  423,  438,  405,
      445,  418,  417,  439,  430,  427,  443,  446,  415,  444,

      451,  447,  419,  435,  425,  431,  421,  432,  445,  420,
      452,  424,  428,  443,  448,  423,  450,  453,  446,  456,
      436,  447,  430,  427,  460,  457,  439,  461,  438,  498,
      444,  435,  425,  431,  462,  432,  445,  450,  463,  456,
      428,  443,  465,  466,  448,  460,  446,  452,  436,  447,
      467,  468,  453,  469,  439,  461,  438,  444,  457,  470,
      471,  462,  474,  472,  477,  450,  463,  456,  478,  465,
      466,  448,  476,  460,  481,  452,  483,  482,  467,  498,
      453,  487,  449,  469,  472,  478,  457,  491,  442,  470,
      474,  468,  475,  475,  471,  475,  485,  477,  482,  486,

      476,  489,  441,  490,  491,  499,  475,  493,  497,  495,
      469,  501,  472,  478,  481,  487,  470,  483,  496,  468,
      475,  475,  471,  475,  502,  477,  482,  476,  493,  497,
      499,  485,  491,  475,  486,  496,  489,  490,  510,  495,
      503,  500,  481,  487,  504,  483,  501,  505,  440,  506,
      511,  514,  502,  515,  516,  517,  493,  497,  499,  485,
      500,  519,  486,  496,  489,  490,  495,  511,  503,  520,
      522,  523,  504,  510,  501,  505,  506,  524,  519,  514,
      515,  521,  516,  517,  521,  525,  527,  520,  500,  529,
      528,  531,  523,  530,  532,  511,  537,  535,  534,  536,

      522,  510,  538,  527,  539,  540,  519,  541,  542,  545,
      525,  528,  530,  524,  437,  520,  546,  529,  535,  544,
      523,  547,  549,  548,  537,  551,  531,  522,  534,  532,
      538,  527,  539,  540,  536,  541,  545,  543,  525,  528,
      530,  524,  542,  546,  529,  553,  535,  544,  550,  547,
      549,  554,  556,  550,  531,  534,  543,  532,  558,  550,
      551,  555,  536,  548,  557,  559,  564,  561,  560,  565,
      542,  563,  556,  567,  562,  568,  550,  549,  553,  555,
      550,  554,  571,  574,  543,  572,  558,  550,  551,  560,
      561,  548,  562,  564,  557,  570,  563,  565,  573,  559,

      556,  567,  576,  568,  577,  578,  553,  555,  554,  579,
      571,  574,  572,  558,  581,  582,  583,  560,  561,  585,
      562,  557,  586,  576,  563,  573,  590,  559,  589,  591,
      570,  596,  577,  578,  592,  581,  585,  579,  582,  586,
      593,  607,  594,  608,  583,  595,  589,  590,  598,  599,
      600,  576,  602,  603,  604,  609,  596,  616,  570,  591,
      612,  592,  607,  581,  585,  611,  582,  586,  593,  594,
      610,  583,  608,  595,  589,  590,  598,  599,  600,  615,
      602,  603,  604,  612,  596,  616,  591,  617,  609,  611,
      607,  610,  618,  619,  620,  628,  636,  632,  633,  608,

      634,  627,  625,  626,  635,  639,  615,  640,  645,  637,
      642,  612,  628,  646,  638,  644,  609,  611,  617,  610,
      618,  619,  620,  625,  626,  627,  633,  632,  634,  637,
      636,  638,  635,  645,  648,  647,  640,  652,  642,  650,
      628,  653,  639,  658,  657,  617,  651,  644,  654,  661,
      646,  625,  626,  627,  632,  434,  650,  637,  636,  638,
      647,  645,  652,  640,  655,  648,  651,  433,  654,  429,
      639,  426,  653,  416,  644,  657,  658,  659,  646,  660,
      406,  399,  661,  655,  650,  392,  377,  373,  647,  372,
      652,  358,  648,  357,  651,  355,  654,  351,  659,  653,

      660,  349,  657,  348,  658,  343,  336,  335,  334,  332,
      661,  655,  331,  330,  328,  320,  312,  311,  310,  309,
      308,  307,  302,  300,  285,  283,  659,  281,  660,  667,
      667,  667,  668,  668,  668,  670,  280,  670,  276,  275,
      274,  273,  272,  271,  268,  259,  255,  251,  244,  243,
      238,  222,  209,  205,  192,  181,  180,  174,  171,  160,
      127,  112,  100,   93,   92,   89,   73,   59,   57,   54,
       52,   49,   42,   25,   17,   15,   14,   12,    9,    5,
        4,    3,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
#line 4 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"

#include "vblexDefs.h"

char string_buff[1024];


#line 1065 "vblexer.cpp"

#define INITIAL 0
#define QUOTE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 13 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"


#line 1169 "vblexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 667 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1883 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
#line 16 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 16 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkNL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 18 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkBLANK; }
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 19 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkBLANK; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 21 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkDIGIT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 23 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  return TkOP;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 27 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  return TkOP;
}
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 31 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkCOMMENT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 33 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  string_buff[0] = '\0';
  BEGIN(QUOTE);
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 37 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  strcat(string_buff, yytext);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  strcat(string_buff, "\"");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 43 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  BEGIN(INITIAL);
  return TkSTRING;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 48 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  return TkPUNC;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkCOND; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkEXIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkENDPROC; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkPROC; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkSTMT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 196 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkKEYW; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 213 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkVB; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 215 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{
  return TkIDENT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 219 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
{ return TkOTHER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 221 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"
ECHO;
	YY_BREAK
#line 1391 "vblexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(QUOTE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 667 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 667 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 666);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 221 "c:\\Users\\snaka\\Documents\\Visual Studio 2008\\Projects\\VBLex\\VBLex\\vblexer.l"



int main(void) {
  FlexLexer* lex = new yyFlexLexer;
  int ret;

  while((ret = lex->yylex()) != 0)
  {
    switch(ret) {

      case TkSTRING:
        std::cout << ret << "::" << string_buff << std::endl;
        break;

      default:
        std::cout << ret << "::" << lex->YYText() << std::endl;
        break;
    }
  }

  delete lex;
}

// vim: ff=dos ts=2 sw=2 et

